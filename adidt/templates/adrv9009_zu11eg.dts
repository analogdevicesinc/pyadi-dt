// SPDX-License-Identifier: GPL-2.0
/*
 * ADRV2CRR-FMC using ADRV9009-ZU11EG Rev.B System on Module (200.000 MSPS)
 *
 * https://wiki.analog.com/resources/eval/user-guides/adrv9009
 * https://wiki.analog.com/resources/tools-software/linux-drivers/iio-transceiver/adrv9009
 * https://wiki.analog.com/resources/tools-software/linux-software/adrv9009_advanced_plugin
 * https://wiki.analog.com/resources/eval/user-guides/adrv9009-zu11eg/adrv2crr-fmc_carrier_board
 *
 * hdl_project: <adrv9009zu11eg/adrv2crr_fmc>
 * board_revision: <B>
 *
 * Copyright (C) 2022 Analog Devices Inc.
 */

#include "zynqmp-adrv9009-zu11eg-revb-adrv2crr-fmc-revb-jesd204-fsm.dts"
#include <dt-bindings/jesd204/adxcvr.h>

&hmc7044 {
	// hmc7044_c4: channel@4 {
	// 	adi,divider = <24>;	// 100000000
	// };


	// adi,vcxo-frequency = <122880000>;
	// adi,pll1-clkin-frequencies = <30720000 30720000 0 0>;
	adi,vcxo-frequency = <100000000>;
	adi,pll1-clkin-frequencies = <0 31250000 0 0>;
	adi,pll2-output-frequency = <2400000000>; /* VCO @ 2.400GHz */

	hmc7044_c0: channel@0 {
		reg = <0>;
		adi,extended-name = "DEV_REFCLK_A"; // TRX device clk
		adi,divider = <60>;
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
		adi,coarse-digital-delay = <15>;
	};
	hmc7044_c1: channel@1 {
		reg = <1>;
		adi,extended-name = "DEV_SYSREF_A"; // TRX sysref clk
		adi,divider = <3840>;
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
		adi,startup-mode-dynamic-enable;
		adi,high-performance-mode-disable;
		adi,driver-impedance-mode = <HMC7044_DRIVER_IMPEDANCE_100_OHM>;
	};
	hmc7044_c2: channel@2 {
		reg = <2>;
		adi,extended-name = "DEV_REFCLK_B"; // TRX2 device clk
		adi,divider = <60>;
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
		adi,coarse-digital-delay = <15>;
	};
	hmc7044_c3: channel@3 {
		reg = <3>;
		adi,extended-name = "DEV_SYSREF_B"; // TRX2 sysref clk
		adi,divider = <3840>;
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
		adi,startup-mode-dynamic-enable;
		adi,high-performance-mode-disable;
		adi,driver-impedance-mode = <HMC7044_DRIVER_IMPEDANCE_100_OHM>;
	};
	hmc7044_c4: channel@4 {
		reg = <4>;
		adi,extended-name = "JESD_REFCLK_TX_OBS_AB"; // FPGA Transceiver reference (QPLL)
		adi,divider = <60>;	// 245760000
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
	};
	hmc7044_c5: channel@5 {
		reg = <5>;
		adi,extended-name = "JESD_REFCLK_RX_AB"; // FPGA Transceiver reference (RX-side CPLL usually)
		adi,divider = <60>;	// 245760000
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
	};
	hmc7044_c6: channel@6 {
		reg = <6>;
		adi,extended-name = "CORE_CLK_TX_OBS_AB"; // FPGA Transceiver link clock (shared between TX and OBS)
		adi,divider = <60>;	// 122880000
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
	};
	hmc7044_c7: channel@7 {
		reg = <7>;
		adi,extended-name = "CORE_CLK_RX_AB"; // FPGA Transceiver link clock (shared between RX)
		adi,divider = <60>;	// 245760000
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
	};
	hmc7044_c8: channel@8 {
		reg = <8>;
		adi,extended-name = "FPGA_SYSREF_TX_OBS_AB"; // FPGA sysref TX/OBS
		adi,divider = <3840>;	// 768000
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
		adi,startup-mode-dynamic-enable;
		adi,high-performance-mode-disable;
	};
	hmc7044_c9: channel@9 {
		reg = <9>;
		adi,extended-name = "FPGA_SYSREF_RX_AB"; // FPGA sysref RX
		adi,divider = <3840>;	// 768000
		adi,driver-mode = <HMC7044_DRIVER_MODE_LVDS>;	// LVDS
		adi,startup-mode-dynamic-enable;
		adi,high-performance-mode-disable;
	};

};

&hmc7044_car {
	adi,pll2-output-frequency = <2400000000>; /* VCO @ 2.400GHz */
};

&axi_adrv9009_adxcvr_tx {
	adi,sys-clk-select = <XCVR_QPLL1>; /* Switch to QPLL1 */
};

&axi_adrv9009_adxcvr_rx {
	adi,out-clk-select = <XCVR_PROGDIV_CLK>;
};

&trx0_adrv9009 {
	adi,rx-profile-rf-bandwidth_hz = <{{ rx['rfBandwidth_Hz'] }}>;
	adi,rx-profile-rhb1-decimation = <{{ rx['rhb1Decimation'] }}>;
	adi,rx-profile-rx-bbf3d-bcorner_khz = <{{ rx['rxBbf3dBCorner_kHz'] }}>;
	adi,rx-profile-rx-ddc-mode = <{{ rx['rxDdcMode'] }}>;
	adi,rx-profile-rx-dec5-decimation = <{{ rx['rxDec5Decimation'] }}>;
	adi,rx-profile-rx-fir-decimation = <{{ rx['rxFirDecimation'] }}>;
	adi,rx-profile-rx-fir-gain_db = <{{ rx['filter']['@gain_dB'] }}>;
	adi,rx-profile-rx-fir-num-fir-coefs = <{{ rx['filter']['@numFirCoefs'] }}>;
	adi,rx-profile-rx-output-rate_khz = <{{ rx['rxOutputRate_kHz'] }}>;
	adi,rx-profile-rx-fir-coefs = /bits/ 16 <{{ rx['filter']['coefs'] }}>;
	adi,rx-profile-rx-adc-profile = /bits/ 16 <{{ rx['rxAdcProfile']['coefs'] }}>;

	adi,orx-profile-orx-ddc-mode = <{{ orx['orxDdcMode'] }}>;
	adi,orx-profile-orx-output-rate_khz = <{{ orx['orxOutputRate_kHz'] }}>;
	adi,orx-profile-rf-bandwidth_hz = <{{ orx['rfBandwidth_Hz'] }}>;
	adi,orx-profile-rhb1-decimation = <{{ orx['rhb1Decimation'] }}>;
	adi,orx-profile-rx-bbf3d-bcorner_khz = <{{ orx['rxBbf3dBCorner_kHz'] }}>;
	adi,orx-profile-rx-dec5-decimation = <{{ orx['rxDec5Decimation'] }}>;
	adi,orx-profile-rx-fir-decimation = <{{ orx['rxFirDecimation'] }}>;
	adi,orx-profile-rx-fir-gain_db = <{{ orx['filter']['@gain_dB'] }}>;
	adi,orx-profile-rx-fir-num-fir-coefs = <{{ orx['filter']['@numFirCoefs'] }}>;
	adi,orx-profile-rx-fir-coefs = /bits/ 16  <{{ orx['filter']['coefs'] }}>;
	adi,orx-profile-orx-low-pass-adc-profile = /bits/ 16  <{{ orx['orxLowPassAdcProfile']['coefs'] }}>;
	adi,orx-profile-orx-band-pass-adc-profile = /bits/ 16  <{{ orx['orxBandPassAdcProfile']['coefs'] }}>;

	adi,tx-profile-dac-div = <{{ tx['dacDiv'] }}>;
	adi,tx-profile-primary-sig-bandwidth_hz = <{{ tx['primarySigBandwidth_Hz'] }}>;
	adi,tx-profile-rf-bandwidth_hz = <{{ tx['rfBandwidth_Hz'] }}>;
	adi,tx-profile-thb1-interpolation = <{{ tx['thb1Interpolation'] }}>;
	adi,tx-profile-thb2-interpolation = <{{ tx['thb2Interpolation'] }}>;
	adi,tx-profile-thb3-interpolation = <{{ tx['thb3Interpolation'] }}>;
	adi,tx-profile-tx-bbf3d-bcorner_khz = <{{ tx['txBbf3dBCorner_kHz'] }}>;
	adi,tx-profile-tx-dac3d-bcorner_khz = <{{ tx['txDac3dBCorner_kHz'] }}>;
	adi,tx-profile-tx-fir-gain_db = <{{ tx['filter']['@gain_dB'] }}>;
	adi,tx-profile-tx-fir-interpolation = <{{ tx['txFirInterpolation'] }}>;
	adi,tx-profile-tx-fir-num-fir-coefs = <{{ tx['filter']['@numFirCoefs'] }}>;
	adi,tx-profile-tx-input-rate_khz = <{{ tx['txInputRate_kHz'] }}>;
	adi,tx-profile-tx-int5-interpolation = <{{ tx['txInt5Interpolation'] }}>;
	adi,tx-profile-tx-fir-coefs = /bits/ 16  <{{ tx['filter']['coefs'] }}>;
	adi,tx-profile-loop-back-adc-profile = /bits/ 16 <{{ tx['filter']['coefs'] }}>;

	adi,dig-clocks-clk-pll-hs-div = <{{ clocks['clkPllHsDiv'] }}>;
	adi,dig-clocks-clk-pll-vco-freq_khz = <{{ clocks['clkPllVcoFreq_kHz'] }}>;
	adi,dig-clocks-device-clock_khz = <{{ clocks['deviceClock_kHz'] }}>;
};

&trx1_adrv9009 {
	adi,rx-profile-rf-bandwidth_hz = <{{ rx['rfBandwidth_Hz'] }}>;
	adi,rx-profile-rhb1-decimation = <{{ rx['rhb1Decimation'] }}>;
	adi,rx-profile-rx-bbf3d-bcorner_khz = <{{ rx['rxBbf3dBCorner_kHz'] }}>;
	adi,rx-profile-rx-ddc-mode = <{{ rx['rxDdcMode'] }}>;
	adi,rx-profile-rx-dec5-decimation = <{{ rx['rxDec5Decimation'] }}>;
	adi,rx-profile-rx-fir-decimation = <{{ rx['rxFirDecimation'] }}>;
	adi,rx-profile-rx-fir-gain_db = <{{ rx['filter']['@gain_dB'] }}>;
	adi,rx-profile-rx-fir-num-fir-coefs = <{{ rx['filter']['@numFirCoefs'] }}>;
	adi,rx-profile-rx-output-rate_khz = <{{ rx['rxOutputRate_kHz'] }}>;
	adi,rx-profile-rx-fir-coefs = /bits/ 16 <{{ rx['filter']['coefs'] }}>;
	adi,rx-profile-rx-adc-profile = /bits/ 16 <{{ rx['rxAdcProfile']['coefs'] }}>;

	adi,orx-profile-orx-ddc-mode = <{{ orx['orxDdcMode'] }}>;
	adi,orx-profile-orx-output-rate_khz = <{{ orx['orxOutputRate_kHz'] }}>;
	adi,orx-profile-rf-bandwidth_hz = <{{ orx['rfBandwidth_Hz'] }}>;
	adi,orx-profile-rhb1-decimation = <{{ orx['rhb1Decimation'] }}>;
	adi,orx-profile-rx-bbf3d-bcorner_khz = <{{ orx['rxBbf3dBCorner_kHz'] }}>;
	adi,orx-profile-rx-dec5-decimation = <{{ orx['rxDec5Decimation'] }}>;
	adi,orx-profile-rx-fir-decimation = <{{ orx['rxFirDecimation'] }}>;
	adi,orx-profile-rx-fir-gain_db = <{{ orx['filter']['@gain_dB'] }}>;
	adi,orx-profile-rx-fir-num-fir-coefs = <{{ orx['filter']['@numFirCoefs'] }}>;
	adi,orx-profile-rx-fir-coefs = /bits/ 16  <{{ orx['filter']['coefs'] }}>;
	adi,orx-profile-orx-low-pass-adc-profile = /bits/ 16  <{{ orx['orxLowPassAdcProfile']['coefs'] }}>;
	adi,orx-profile-orx-band-pass-adc-profile = /bits/ 16  <{{ orx['orxBandPassAdcProfile']['coefs'] }}>;

	adi,tx-profile-dac-div = <{{ tx['dacDiv'] }}>;
	adi,tx-profile-primary-sig-bandwidth_hz = <{{ tx['primarySigBandwidth_Hz'] }}>;
	adi,tx-profile-rf-bandwidth_hz = <{{ tx['rfBandwidth_Hz'] }}>;
	adi,tx-profile-thb1-interpolation = <{{ tx['thb1Interpolation'] }}>;
	adi,tx-profile-thb2-interpolation = <{{ tx['thb2Interpolation'] }}>;
	adi,tx-profile-thb3-interpolation = <{{ tx['thb3Interpolation'] }}>;
	adi,tx-profile-tx-bbf3d-bcorner_khz = <{{ tx['txBbf3dBCorner_kHz'] }}>;
	adi,tx-profile-tx-dac3d-bcorner_khz = <{{ tx['txDac3dBCorner_kHz'] }}>;
	adi,tx-profile-tx-fir-gain_db = <{{ tx['filter']['@gain_dB'] }}>;
	adi,tx-profile-tx-fir-interpolation = <{{ tx['txFirInterpolation'] }}>;
	adi,tx-profile-tx-fir-num-fir-coefs = <{{ tx['filter']['@numFirCoefs'] }}>;
	adi,tx-profile-tx-input-rate_khz = <{{ tx['txInputRate_kHz'] }}>;
	adi,tx-profile-tx-int5-interpolation = <{{ tx['txInt5Interpolation'] }}>;
	adi,tx-profile-tx-fir-coefs = /bits/ 16  <{{ tx['filter']['coefs'] }}>;
	adi,tx-profile-loop-back-adc-profile = /bits/ 16 <{{ lpbk['lpbkAdcProfile']['coefs'] }}>;

	adi,dig-clocks-clk-pll-hs-div = <{{ clocks['clkPllHsDiv'] }}>;
	adi,dig-clocks-clk-pll-vco-freq_khz = <{{ clocks['clkPllVcoFreq_kHz'] }}>;
	adi,dig-clocks-device-clock_khz = <{{ clocks['deviceClock_kHz'] }}>;
};
