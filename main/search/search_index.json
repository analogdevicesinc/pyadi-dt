{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ADI Device Tree Utilities Library and CLI for managing device trees with Analog Devices components. This includes data converters, clock chips, amplifiers, and many others. Installation from the latest source can be done through pip on Windows/Linux/macOS: pip install git+https://github.com/analogdevicesinc/pyadi-dt.git Useful links Source : GitHub repo Reporting bugs : GitHub issue tracker Support : EngineerZone Software Interface Tools forum DeviceTree Specification : DeviceTree specification and organization reference","title":"Home"},{"location":"#adi-device-tree-utilities","text":"Library and CLI for managing device trees with Analog Devices components. This includes data converters, clock chips, amplifiers, and many others. Installation from the latest source can be done through pip on Windows/Linux/macOS: pip install git+https://github.com/analogdevicesinc/pyadi-dt.git","title":"ADI Device Tree Utilities"},{"location":"#useful-links","text":"Source : GitHub repo Reporting bugs : GitHub issue tracker Support : EngineerZone Software Interface Tools forum DeviceTree Specification : DeviceTree specification and organization reference","title":"Useful links"},{"location":"access/","text":"Access Models adidt supports a number of different access models depending on where your device tree is located and how you want to apply changes. For example, the device tree can be directly read from the sysfs with local_sysfs and remote_sysfs . Remote calls will always utilize an SSH connect to access and run commands on remote systems. adidt does not support overlay loading at runtime (yet), so writes should be performed with local_sd or remote_sd . Note that the SD card management features are only supported on ADI platforms where the DT has a known location. Supported modes local_sysfs - DT extracted from sysfs. local_sd - DT extracted from locally attach ADI SD card. remote_sysfs - DT extracted from remote board sysfs. remote_sd - DT extracted from remote board with attached ADI SD card. Examples Set the default TX LO of a AD9361 based system to 1 GHz remotely: adidtc -i ad9361.local -c remote_sd props -cp adi,ad9361 adi,tx-synthesizer-frequency-hz 1000000000 Set the default TX LO of a AD9361 based system to 1 GHz from the board itself: adidtc -c local_sd props -cp adi,ad9361 adi,tx-synthesizer-frequency-hz 1000000000 Get the default RX LO of a AD9361 based system: adidtc -c local_sysfs props -cp adi,ad9361 adi,rx-synthesizer-frequency-hz 2400000000","title":"Access Models"},{"location":"access/#access-models","text":"adidt supports a number of different access models depending on where your device tree is located and how you want to apply changes. For example, the device tree can be directly read from the sysfs with local_sysfs and remote_sysfs . Remote calls will always utilize an SSH connect to access and run commands on remote systems. adidt does not support overlay loading at runtime (yet), so writes should be performed with local_sd or remote_sd . Note that the SD card management features are only supported on ADI platforms where the DT has a known location.","title":"Access Models"},{"location":"access/#supported-modes","text":"local_sysfs - DT extracted from sysfs. local_sd - DT extracted from locally attach ADI SD card. remote_sysfs - DT extracted from remote board sysfs. remote_sd - DT extracted from remote board with attached ADI SD card.","title":"Supported modes"},{"location":"access/#examples","text":"Set the default TX LO of a AD9361 based system to 1 GHz remotely: adidtc -i ad9361.local -c remote_sd props -cp adi,ad9361 adi,tx-synthesizer-frequency-hz 1000000000 Set the default TX LO of a AD9361 based system to 1 GHz from the board itself: adidtc -c local_sd props -cp adi,ad9361 adi,tx-synthesizer-frequency-hz 1000000000 Get the default RX LO of a AD9361 based system: adidtc -c local_sysfs props -cp adi,ad9361 adi,rx-synthesizer-frequency-hz 2400000000","title":"Examples"},{"location":"cli/","text":"Command Line Interface This page provides documentation for our command line tools. adidtc ADI device tree utility Usage: adidtc [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --no-color , -nc boolean Disable formatting False --context , -c choice ( local_file | local_sd | local_sysfs | remote_sysfs | remote_sd ) Set context local_sysfs --ip , -i text Set ip used by remote contexts 192.168.2.1 --username , -u text Set username used by remote SSH sessions (default is root) root --password , -w text Set password used by remote SSH sessions (default is analog) analog --arch , -a choice ( arm | arm64 | auto ) Set target architecture which will set the target DT. auto with determine from running system auto --help boolean Show this message and exit. False jif JIF supported updates of DT NODE_TYPE - Type of device the configuration is to address Usage: adidtc jif [OPTIONS] {clock|converter|system|fpga} Options: Name Type Description Default --reboot , -r boolean Reboot boards after successful write False --filename , -f path Name of json file to import with JIF config required --help boolean Show this message and exit. False prop Get and set device tree properties NODE_NAME - Name of node to address PROP - Name property to get/set VALUE - Value to write to property of node Usage: adidtc prop [OPTIONS] [NODE_NAME] [PROP] [VALUE] Options: Name Type Description Default --reboot , -r boolean Reboot boards after successful write False --compat , -cp boolean Use node name to check against compatible id of node during search False --children , -ch boolean Show properties of child nodes 1 level down False --help boolean Show this message and exit. False props Get and set device tree properties NODE_NAME - Name of node(s) to address Usage: adidtc props [OPTIONS] [NODE_NAME]... Options: Name Type Description Default --compat , -cp boolean Use node name to check against compatible id of node during search. This is only used for the first node False --reboot , -r boolean Reboot boards after successful write False --prop , -p text Property of node to read to set required --value , -v text Value to set property to required --help boolean Show this message and exit. False sd-move Move files on existing SD card REFERENCE_DESIGN - Name of reference design folder on SD card Usage: adidtc sd-move [OPTIONS] [RD] Options: Name Type Description Default --reboot , -r boolean Reboot boards after successful write False --show , -s boolean Print commands as run False --dry-run , -d boolean Dryrun, do not run commands False --help boolean Show this message and exit. False sd-remote-copy Copy local boot files to remote existing SD card FILES - List of files to copy (comma separated) Usage: adidtc sd-remote-copy [OPTIONS] [FILES] Options: Name Type Description Default --reboot , -r boolean Reboot boards after successful write False --show , -s boolean Print commands as run False --dry-run , -d boolean Dryrun, do not run commands False --help boolean Show this message and exit. False","title":"CLI Reference"},{"location":"cli/#command-line-interface","text":"This page provides documentation for our command line tools.","title":"Command Line Interface"},{"location":"cli/#adidtc","text":"ADI device tree utility Usage: adidtc [OPTIONS] COMMAND [ARGS]... Options: Name Type Description Default --no-color , -nc boolean Disable formatting False --context , -c choice ( local_file | local_sd | local_sysfs | remote_sysfs | remote_sd ) Set context local_sysfs --ip , -i text Set ip used by remote contexts 192.168.2.1 --username , -u text Set username used by remote SSH sessions (default is root) root --password , -w text Set password used by remote SSH sessions (default is analog) analog --arch , -a choice ( arm | arm64 | auto ) Set target architecture which will set the target DT. auto with determine from running system auto --help boolean Show this message and exit. False","title":"adidtc"},{"location":"cli/#jif","text":"JIF supported updates of DT NODE_TYPE - Type of device the configuration is to address Usage: adidtc jif [OPTIONS] {clock|converter|system|fpga} Options: Name Type Description Default --reboot , -r boolean Reboot boards after successful write False --filename , -f path Name of json file to import with JIF config required --help boolean Show this message and exit. False","title":"jif"},{"location":"cli/#prop","text":"Get and set device tree properties NODE_NAME - Name of node to address PROP - Name property to get/set VALUE - Value to write to property of node Usage: adidtc prop [OPTIONS] [NODE_NAME] [PROP] [VALUE] Options: Name Type Description Default --reboot , -r boolean Reboot boards after successful write False --compat , -cp boolean Use node name to check against compatible id of node during search False --children , -ch boolean Show properties of child nodes 1 level down False --help boolean Show this message and exit. False","title":"prop"},{"location":"cli/#props","text":"Get and set device tree properties NODE_NAME - Name of node(s) to address Usage: adidtc props [OPTIONS] [NODE_NAME]... Options: Name Type Description Default --compat , -cp boolean Use node name to check against compatible id of node during search. This is only used for the first node False --reboot , -r boolean Reboot boards after successful write False --prop , -p text Property of node to read to set required --value , -v text Value to set property to required --help boolean Show this message and exit. False","title":"props"},{"location":"cli/#sd-move","text":"Move files on existing SD card REFERENCE_DESIGN - Name of reference design folder on SD card Usage: adidtc sd-move [OPTIONS] [RD] Options: Name Type Description Default --reboot , -r boolean Reboot boards after successful write False --show , -s boolean Print commands as run False --dry-run , -d boolean Dryrun, do not run commands False --help boolean Show this message and exit. False","title":"sd-move"},{"location":"cli/#sd-remote-copy","text":"Copy local boot files to remote existing SD card FILES - List of files to copy (comma separated) Usage: adidtc sd-remote-copy [OPTIONS] [FILES] Options: Name Type Description Default --reboot , -r boolean Reboot boards after successful write False --show , -s boolean Print commands as run False --dry-run , -d boolean Dryrun, do not run commands False --help boolean Show this message and exit. False","title":"sd-remote-copy"},{"location":"parts/","text":"Part Layers To aid in device tree manipulation and integrate with other tools like pyadi-jif , adidt contais specific abstractions for different ADI parts. This is helpful for large configuration changes, which may or may not have multiple interrelated device tree nodes. Configurations are consumed in a few ways which include json files and through stdin. Support Components HMC7044 AD9680 AD9144 AD9523-1 DAQ2 (AD9680, AD9144, AD9523-1) Example with JSON from pyadi-jif This example updates the device tree of a DAQ2 board to set the sample rate of the RX (ADC) path to 1 GSPS. $ cat ad9523_1_jif.json { \"clock\": { \"m1\": 3, \"n2\": 24, \"r2\": 1, \"out_dividers\": [ 2, 128, 8 ], \"output_clocks\": { \"ADC_CLK_FMC\": { \"rate\": 125000000.0, \"divider\": 8 }, \"ADC_CLK\": { \"rate\": 500000000.0, \"divider\": 2 }, \"CLKD_ADC_SYSREF\": { \"rate\": 7812500.0, \"divider\": 128 }, \"ADC_SYSREF\": { \"rate\": 7812500.0, \"divider\": 128 } }, \"vcxo\": 125000000.0, \"vco\": 1000000000.0, \"part\": \"AD9523-1\" }, } $ adidtc -i daq2.local -c remote_sd jif clock -f ad9523_1_jif.json","title":"Parts Layers"},{"location":"parts/#part-layers","text":"To aid in device tree manipulation and integrate with other tools like pyadi-jif , adidt contais specific abstractions for different ADI parts. This is helpful for large configuration changes, which may or may not have multiple interrelated device tree nodes. Configurations are consumed in a few ways which include json files and through stdin.","title":"Part Layers"},{"location":"parts/#support-components","text":"HMC7044 AD9680 AD9144 AD9523-1 DAQ2 (AD9680, AD9144, AD9523-1)","title":"Support Components"},{"location":"parts/#example-with-json-from-pyadi-jif","text":"This example updates the device tree of a DAQ2 board to set the sample rate of the RX (ADC) path to 1 GSPS. $ cat ad9523_1_jif.json { \"clock\": { \"m1\": 3, \"n2\": 24, \"r2\": 1, \"out_dividers\": [ 2, 128, 8 ], \"output_clocks\": { \"ADC_CLK_FMC\": { \"rate\": 125000000.0, \"divider\": 8 }, \"ADC_CLK\": { \"rate\": 500000000.0, \"divider\": 2 }, \"CLKD_ADC_SYSREF\": { \"rate\": 7812500.0, \"divider\": 128 }, \"ADC_SYSREF\": { \"rate\": 7812500.0, \"divider\": 128 } }, \"vcxo\": 125000000.0, \"vco\": 1000000000.0, \"part\": \"AD9523-1\" }, } $ adidtc -i daq2.local -c remote_sd jif clock -f ad9523_1_jif.json","title":"Example with JSON from pyadi-jif"},{"location":"ref/","text":"Module Reference dt Device tree interface class. dt ( sd ) Device tree interface and management. Parameters: Name Type Description Default arch Optional[str] Architecture of remote target board. Must be arm or arm64 required dt_source Optional[str] Location of device tree. Options are: local_sysfs: Import from local sysfs local_sd: Import from local SD card (this is ADI specific) local_file: Import from local file remote_sysfs: Import from remote sysfs remote_sd: Import from remote board's SD card required ip Optional[str] IP address of remote board required username Optional[str] username to use with remote board SSH session required password Optional[str] password to use with remote board SSH session required local_dt_filepath Optional[str] Path to local DT file required get_node_by_compatible ( self , compatible_id : str ) Get node from dt with specific compatible id Parameters: Name Type Description Default compatible_id str Name in compatible field of node required Returns: Type Description List[fdt.items.PropStrings] List of device tree nodes found write_out_dts ( self , filename : str ) Write out current DT structure to file parts special ad9523_1 ad9523_1_dt ( clock_dt ) AD9523-1 Device tree map class. set_dt_node_from_config ( self , node : Node , config : Dict , append = False ) Set AD9523-1 node from JIF configuration Parameters: Name Type Description Default node fdt.Node Device tree parent node of AD9523-1 required config Dict Configuration struct generated from JIF required append boolean Enable appending to subnode, if false the existing are removed False ad9545 ad9545_dt ( dt ) AD9545 Device tree map class. set_dt_node_from_config ( self , node : Node , config : Dict , append = False ) Set AD9545 node from JIF configuration Parameters: Name Type Description Default node fdt.Node Device tree parent node of ad9545 required config Dict Configuration struct generated from JIF required hmc7044 hmc7044_dt ( dt , clock_dt ) HMC7044 Device tree map class. set_dt_node_from_config ( self , node : Node , config : Dict , append = False ) Set HMC7044 node from JIF configuration Parameters: Name Type Description Default node fdt.Node Device tree parent node of hmc7044 required config Dict Configuration struct generated from JIF required append boolean Enable appending to subnode, if false the existing are removed False sd ADI SD Card Manipulation Utilies HMC7044 Device tree map class. set_dt_node_from_config ( self , node : Node , config : Dict , append = False ) Set HMC7044 node from JIF configuration Parameters: Name Type Description Default node fdt.Node Device tree parent node of hmc7044 required config Dict Configuration struct generated from JIF required append boolean Enable appending to subnode, if false the existing are removed False","title":"Module Reference"},{"location":"ref/#module-reference","text":"","title":"Module Reference"},{"location":"ref/#adidt.dt","text":"Device tree interface class.","title":"dt"},{"location":"ref/#adidt.dt.dt","text":"Device tree interface and management. Parameters: Name Type Description Default arch Optional[str] Architecture of remote target board. Must be arm or arm64 required dt_source Optional[str] Location of device tree. Options are: local_sysfs: Import from local sysfs local_sd: Import from local SD card (this is ADI specific) local_file: Import from local file remote_sysfs: Import from remote sysfs remote_sd: Import from remote board's SD card required ip Optional[str] IP address of remote board required username Optional[str] username to use with remote board SSH session required password Optional[str] password to use with remote board SSH session required local_dt_filepath Optional[str] Path to local DT file required","title":"dt"},{"location":"ref/#adidt.dt.dt.get_node_by_compatible","text":"Get node from dt with specific compatible id Parameters: Name Type Description Default compatible_id str Name in compatible field of node required Returns: Type Description List[fdt.items.PropStrings] List of device tree nodes found","title":"get_node_by_compatible()"},{"location":"ref/#adidt.dt.dt.write_out_dts","text":"Write out current DT structure to file","title":"write_out_dts()"},{"location":"ref/#adidt.parts","text":"","title":"parts"},{"location":"ref/#adidt.parts.ad9523_1","text":"","title":"ad9523_1"},{"location":"ref/#adidt.parts.ad9523_1.ad9523_1_dt","text":"AD9523-1 Device tree map class.","title":"ad9523_1_dt"},{"location":"ref/#adidt.parts.ad9523_1.ad9523_1_dt.set_dt_node_from_config","text":"Set AD9523-1 node from JIF configuration Parameters: Name Type Description Default node fdt.Node Device tree parent node of AD9523-1 required config Dict Configuration struct generated from JIF required append boolean Enable appending to subnode, if false the existing are removed False","title":"set_dt_node_from_config()"},{"location":"ref/#adidt.parts.ad9545","text":"","title":"ad9545"},{"location":"ref/#adidt.parts.ad9545.ad9545_dt","text":"AD9545 Device tree map class.","title":"ad9545_dt"},{"location":"ref/#adidt.parts.ad9545.ad9545_dt.set_dt_node_from_config","text":"Set AD9545 node from JIF configuration Parameters: Name Type Description Default node fdt.Node Device tree parent node of ad9545 required config Dict Configuration struct generated from JIF required","title":"set_dt_node_from_config()"},{"location":"ref/#adidt.parts.hmc7044","text":"","title":"hmc7044"},{"location":"ref/#adidt.parts.hmc7044.hmc7044_dt","text":"HMC7044 Device tree map class.","title":"hmc7044_dt"},{"location":"ref/#adidt.parts.hmc7044.hmc7044_dt.set_dt_node_from_config","text":"Set HMC7044 node from JIF configuration Parameters: Name Type Description Default node fdt.Node Device tree parent node of hmc7044 required config Dict Configuration struct generated from JIF required append boolean Enable appending to subnode, if false the existing are removed False","title":"set_dt_node_from_config()"},{"location":"ref/#adidt.sd","text":"ADI SD Card Manipulation Utilies HMC7044 Device tree map class.","title":"sd"},{"location":"ref/#adidt.parts.hmc7044.hmc7044_dt.set_dt_node_from_config","text":"Set HMC7044 node from JIF configuration Parameters: Name Type Description Default node fdt.Node Device tree parent node of hmc7044 required config Dict Configuration struct generated from JIF required append boolean Enable appending to subnode, if false the existing are removed False","title":"set_dt_node_from_config()"},{"location":"utils/","text":"Utilities This module also contains a few utilities that are specific to ADI prototyping platforms, which are used by the development teams and automation systems. They can be handy for repetitive tasks. SD Card BOOT Files These commands and methods are used to update running system's SD card to place designed reference design files in SD card root adidtc -i analog.local -c remote_sd sd-move zynq-zc706-adv7511-fmcdaq2 -r","title":"Utilities"},{"location":"utils/#utilities","text":"This module also contains a few utilities that are specific to ADI prototyping platforms, which are used by the development teams and automation systems. They can be handy for repetitive tasks.","title":"Utilities"},{"location":"utils/#sd-card-boot-files","text":"These commands and methods are used to update running system's SD card to place designed reference design files in SD card root adidtc -i analog.local -c remote_sd sd-move zynq-zc706-adv7511-fmcdaq2 -r","title":"SD Card BOOT Files"}]}