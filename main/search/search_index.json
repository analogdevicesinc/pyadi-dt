{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ADI Device Tree Utilities","text":"<p>Library and CLI for managing device trees with Analog Devices components. This includes data converters, clock chips, amplifiers, and many others.</p> <p>Installation from the latest source can be done through pip on Windows/Linux/macOS:</p> <pre><code>pip install git+https://github.com/analogdevicesinc/pyadi-dt.git\n</code></pre> <p></p>"},{"location":"#useful-links","title":"Useful links","text":"<ul> <li>Source: GitHub repo</li> <li>Reporting bugs: GitHub issue tracker</li> <li>Support: EngineerZone Software Interface Tools forum</li> <li>DeviceTree Specification: DeviceTree specification and organization reference</li> </ul>"},{"location":"access/","title":"Access Models","text":"<p>adidt supports a number of different access models depending on where your device tree is located and how you want to apply changes. For example, the device tree can be directly read from the sysfs with local_sysfs and remote_sysfs. Remote calls will always utilize an SSH connect to access and run commands on remote systems. adidt does not support overlay loading at runtime (yet), so writes should be performed with local_sd or remote_sd. Note that the SD card management features are only supported on ADI platforms where the DT has a known location.</p>"},{"location":"access/#supported-modes","title":"Supported modes","text":"<ul> <li><code>local_sysfs</code> - DT extracted from sysfs.</li> <li><code>local_sd</code> - DT extracted from locally attach ADI SD card.</li> <li><code>remote_sysfs</code> - DT extracted from remote board sysfs.</li> <li><code>remote_sd</code> - DT extracted from remote board with attached ADI SD card.</li> </ul>"},{"location":"access/#examples","title":"Examples","text":"<p>Set the default TX LO of a AD9361 based system to 1 GHz remotely:</p> <pre><code>adidtc -i ad9361.local -c remote_sd props -cp adi,ad9361 adi,tx-synthesizer-frequency-hz 1000000000\n</code></pre> <p>Set the default TX LO of a AD9361 based system to 1 GHz from the board itself:</p> <pre><code>adidtc -c local_sd props -cp adi,ad9361 adi,tx-synthesizer-frequency-hz 1000000000\n</code></pre> <p>Get the default RX LO of a AD9361 based system:</p> <pre><code>adidtc -c local_sysfs props -cp adi,ad9361 adi,rx-synthesizer-frequency-hz\n\n2400000000\n</code></pre>"},{"location":"cli/","title":"Command Line Interface","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"cli/#adidtc","title":"adidtc","text":"<p>ADI device tree utility</p> <p>Usage:</p> <pre><code>adidtc [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--no-color</code>, <code>-nc</code> boolean Disable formatting <code>False</code> <code>--context</code>, <code>-c</code> choice (<code>local_file</code> | <code>local_sd</code> | <code>local_sysfs</code> | <code>remote_sysfs</code> | <code>remote_sd</code>) Set context <code>local_sysfs</code> <code>--ip</code>, <code>-i</code> text Set ip used by remote contexts <code>192.168.2.1</code> <code>--username</code>, <code>-u</code> text Set username used by remote SSH sessions (default is root) <code>root</code> <code>--password</code>, <code>-w</code> text Set password used by remote SSH sessions (default is analog) <code>analog</code> <code>--arch</code>, <code>-a</code> choice (<code>arm</code> | <code>arm64</code> | <code>auto</code>) Set target architecture which will set the target DT. auto with determine from running system <code>auto</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#jif","title":"jif","text":"<p>JIF supported updates of DT</p> <p>NODE_TYPE      - Type of device the configuration is to address</p> <p>Usage:</p> <pre><code>adidtc jif [OPTIONS] {clock|converter|system|fpga}\n</code></pre> <p>Options:</p> Name Type Description Default <code>--reboot</code>, <code>-r</code> boolean Reboot boards after successful write <code>False</code> <code>--filename</code>, <code>-f</code> path Name of json file to import with JIF config None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#prop","title":"prop","text":"<p>Get and set device tree properties</p> <p>NODE_NAME      - Name of node to address PROP           - Name property to get/set VALUE          - Value to write to property of node</p> <p>Usage:</p> <pre><code>adidtc prop [OPTIONS] [NODE_NAME] [PROP] [VALUE]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--reboot</code>, <code>-r</code> boolean Reboot boards after successful write <code>False</code> <code>--compat</code>, <code>-cp</code> boolean Use node name to check against compatible id of node during search <code>False</code> <code>--children</code>, <code>-ch</code> boolean Show properties of child nodes 1 level down <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#props","title":"props","text":"<p>Get and set device tree properties</p> <p>NODE_NAME      - Name of node(s) to address</p> <p>Usage:</p> <pre><code>adidtc props [OPTIONS] [NODE_NAME]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--compat</code>, <code>-cp</code> boolean Use node name to check against compatible id of node during search. This is only used for the first node <code>False</code> <code>--reboot</code>, <code>-r</code> boolean Reboot boards after successful write <code>False</code> <code>--prop</code>, <code>-p</code> text Property of node to read to set None <code>--value</code>, <code>-v</code> text Value to set property to None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#sd-move","title":"sd-move","text":"<p>Move files on existing SD card</p> <p>REFERENCE_DESIGN  - Name of reference design folder on SD card</p> <p>Usage:</p> <pre><code>adidtc sd-move [OPTIONS] [RD]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--reboot</code>, <code>-r</code> boolean Reboot boards after successful write <code>False</code> <code>--show</code>, <code>-s</code> boolean Print commands as run <code>False</code> <code>--dry-run</code>, <code>-d</code> boolean Dryrun, do not run commands <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#sd-remote-copy","title":"sd-remote-copy","text":"<p>Copy local boot files to remote existing SD card</p> <p>FILES  - List of files to copy (comma separated)</p> <p>Usage:</p> <pre><code>adidtc sd-remote-copy [OPTIONS] [FILES]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--reboot</code>, <code>-r</code> boolean Reboot boards after successful write <code>False</code> <code>--show</code>, <code>-s</code> boolean Print commands as run <code>False</code> <code>--dry-run</code>, <code>-d</code> boolean Dryrun, do not run commands <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"parts/","title":"Part Layers","text":"<p>To aid in device tree manipulation and integrate with other tools like pyadi-jif, adidt contais specific abstractions for different ADI parts. This is helpful for large configuration changes, which may or may not have multiple interrelated device tree nodes.</p> <p>Configurations are consumed in a few ways which include json files and through stdin.</p>"},{"location":"parts/#support-components","title":"Support Components","text":"<ul> <li>HMC7044</li> <li>AD9680</li> <li>AD9144</li> <li>AD9523-1</li> <li>DAQ2 (AD9680, AD9144, AD9523-1)</li> </ul>"},{"location":"parts/#example-with-json-from-pyadi-jif","title":"Example with JSON from pyadi-jif","text":"<p>This example updates the device tree of a DAQ2 board to set the sample rate of the RX (ADC) path to 1 GSPS.</p> <pre><code>$ cat ad9523_1_jif.json\n{\n    \"clock\": {\n        \"m1\": 3,\n        \"n2\": 24,\n        \"r2\": 1,\n        \"out_dividers\": [\n            2,\n            128,\n            8\n        ],\n        \"output_clocks\": {\n            \"ADC_CLK_FMC\": {\n                \"rate\": 125000000.0,\n                \"divider\": 8\n            },\n            \"ADC_CLK\": {\n                \"rate\": 500000000.0,\n                \"divider\": 2\n            },\n            \"CLKD_ADC_SYSREF\": {\n                \"rate\": 7812500.0,\n                \"divider\": 128\n            },\n            \"ADC_SYSREF\": {\n                \"rate\": 7812500.0,\n                \"divider\": 128\n            }\n        },\n        \"vcxo\": 125000000.0,\n        \"vco\": 1000000000.0,\n        \"part\": \"AD9523-1\"\n    },\n}\n\n\n$ adidtc -i daq2.local -c remote_sd jif clock -f ad9523_1_jif.json\n</code></pre>"},{"location":"ref/","title":"Module Reference","text":"<p>         Bases: <code>dt</code>, <code>clock_dt</code></p> <p>HMC7044 Device tree map class.</p>"},{"location":"ref/#adidt.parts.hmc7044.hmc7044_dt.set_dt_node_from_config","title":"<code>set_dt_node_from_config(node: fdt.Node, config: Dict, append = False)</code>","text":"<p>Set HMC7044 node from JIF configuration</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>fdt.Node</code> <p>Device tree parent node of hmc7044</p> required <code>config</code> <code>Dict</code> <p>Configuration struct generated from JIF</p> required <code>append</code> <code>boolean</code> <p>Enable appending to subnode, if false the existing are removed</p> <code>False</code>"},{"location":"utils/","title":"Utilities","text":"<p>This module also contains a few utilities that are specific to ADI prototyping platforms, which are used by the development teams and automation systems. They can be handy for repetitive tasks.</p>"},{"location":"utils/#sd-card-boot-files","title":"SD Card BOOT Files","text":"<p>These commands and methods are used to update running system's SD card to place designed reference design files in SD card root</p> <pre><code>adidtc -i analog.local -c remote_sd sd-move zynq-zc706-adv7511-fmcdaq2 -r\n</code></pre>"}]}